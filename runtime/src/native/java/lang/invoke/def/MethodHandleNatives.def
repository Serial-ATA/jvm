import java.lang.Object;
import java.lang.Class;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MemberName;
import java.lang.invoke.CallSite;

public class MethodHandleNatives {
    //--- MemberName support

    static native void init(MemberName self, Object ref);
    static native void expand(MemberName self);
    static native MemberName resolve(MemberName self, Class<?> caller, int lookupMode,
            boolean speculativeResolve) throws LinkageError, ClassNotFoundException;

    //--- Field layout queries parallel to jdk.internal.misc.Unsafe:
    static native long objectFieldOffset(MemberName self);  // e.g., returns vmindex
    static native long staticFieldOffset(MemberName self);  // e.g., returns vmindex
    static native Object staticFieldBase(MemberName self);  // e.g., returns clazz
    static native Object getMemberVMInfo(MemberName self);  // returns {vmindex,vmtarget}

    //--- CallSite support

    // Tell the JVM that we need to change the target of a CallSite.
    static native void setCallSiteTargetNormal(CallSite site, MethodHandle target);
    static native void setCallSiteTargetVolatile(CallSite site, MethodHandle target);

    static native void copyOutBootstrapArguments(Class<?> caller, int[] indexInfo,
                                                 int start, int end,
                                                 Object[] buf, int pos,
                                                 boolean resolve,
                                                 Object ifNotAvailable);

    static class CallSiteContext {}

    // Invalidate all recorded nmethods.
    private static native void clearCallSiteContext(CallSiteContext context);

    private static native void registerNatives();

    public class Constants {
        @Native static final int MN_IS_METHOD           = 0x00010000; // method (not constructor)
        @Native static final int MN_IS_CONSTRUCTOR      = 0x00020000; // constructor
        @Native static final int MN_IS_FIELD            = 0x00040000; // field
        @Native static final int MN_IS_TYPE             = 0x00080000; // nested type
        @Native static final int MN_CALLER_SENSITIVE    = 0x00100000; // @CallerSensitive annotation detected
        @Native static final int MN_TRUSTED_FINAL       = 0x00200000; // trusted final field
        @Native static final int MN_HIDDEN_MEMBER       = 0x00400000; // members defined in a hidden class or with @Hidden
        @Native static final int MN_REFERENCE_KIND_SHIFT = 24; // refKind
        @Native static final int MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT;

        @Native static final int LM_MODULE        = 0x10; // Lookup.MODULE
        @Native static final int LM_UNCONDITIONAL = 0x20; // Lookup.UNCONDITIONAL
        @Native static final int LM_TRUSTED       = -1;
    }

    private static native int getNamedCon(int which, Object[] name);
}