use std::sync::Mutex;

use fxhash::FxBuildHasher;
use indexmap::IndexSet;
use once_cell::sync::Lazy;

type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;

/// The symbol interner, responsible for mapping symbols to strings
struct SymbolInterner {
	arena: bumpalo::Bump,
	set: FxIndexSet<&'static str>
}

impl SymbolInterner {
	fn initialize() -> Self {
		let mut this = Self {
			arena: bumpalo::Bump::new(),
			set: FxIndexSet::default()
		};

		// Method generated by `vm_symbols::define_symbols`
		this.preintern();
		this
	}

	/// Intern a string
	#[allow(trivial_casts)]
	fn intern(&mut self, string: &str) -> Symbol {
		if let Some(symbol_idx) = self.set.get_index_of(string) {
			return Symbol::new(symbol_idx as u32);
		}

		// We extend the lifetime of the string to `'static`, which is safe,
		// as we only use the strings while the arena is alive
		let string: &'static str = unsafe { &*(*self.arena.alloc(string) as *const str) };

		let (index, _) = self.set.insert_full(string);
		Symbol::new(index as u32)
	}

	/// Gets the string for a Symbol
	fn get(&self, symbol: Symbol) -> &str {
		self.set[symbol.as_u32() as usize]
	}
}

static INTERNER: Lazy<Mutex<SymbolInterner>> = Lazy::new(|| Mutex::new(SymbolInterner::initialize()));

/// An index representation of an interned string
///
/// These are used for quick actions frequently accessed strings
#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
pub struct Symbol(u32);

impl Symbol {
	/// Create a new symbol with the specified index
	pub const fn new(index: u32) -> Self {
		Self(index)
	}

	/// Access the actual string associated with this symbol
	pub fn as_str(&self) -> &str {
		let guard = INTERNER.lock().unwrap();
		unsafe { core::mem::transmute::<&str, &'static str>(guard.get(*self)) }
	}

	/// Access the `u32` representation of this symbol
	pub fn as_u32(&self) -> u32 {
		self.0
	}
}

/// Gets a generated symbol using the names defined in `vm_symbols::define_symbols!`
#[macro_export]
macro_rules! sym {
	($symbol:ident) => {
		$crate::symbols::generated_symbols::$symbol
	}
}

// Defined in $ROOT/generators/vm_symbols
vm_symbols::define_symbols! {
	// Classes
	java_lang_Class: "java/lang/Class",
	java_lang_Object: "java/lang/Object",
	java_lang_System: "java/lang/System",

	// Signatures
	void_method_signature: "()V",

	bool_array: "[Z",
	byte_array: "[B",
	char_array: "[C",
	int_array:  "[I",
	long_array: "[J",
}
